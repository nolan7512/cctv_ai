# Camera 1 — MAIN for ring buffer (hi-res), SUB for AI (low-res) — NO GStreamer
RTSP_URL=rtsp://user:pass@CAM1/streamMain
RTSP_URL_SUB=rtsp://user:pass@CAM1/streamSub

# Detection
FRAME_STRIDE=2
OBJECTS_OF_INTEREST=person,car,motorcycle,dog,cat
DETECTION_CONF=0.55        # ↑ tăng ngưỡng tin cậy (0.55–0.65 tuỳ noise)
MIN_BBOX_AREA=5000        # ↑ lọc vật thể quá nhỏ/xa (tăng nữa nếu còn nhiễu)

# Motion Gate (first pass)
MOTION_MIN_PIXELS=5000    # ↑ số pixel thay đổi tối thiểu
MOTION_RATIO=0.02          # ↑ tỉ lệ thay đổi khung hình

# Event control
COOLDOWN_SECONDS=2        # ↑ làm nguội sau 1 event để tránh spam
MERGE_WINDOW_SECONDS=20     # ↑ gộp nhiều detect sát nhau thành 1 event

# Debounce/confirm (mới, dùng ở bước 2)
CONFIRM_FRAMES=3           # cần ≥3 frame có cùng lớp trong cửa sổ ngắn
CONFIRM_WINDOW=0.8         # (giây) cửa sổ kiểm chứng
MIN_EVENT_SECONDS=0.7      # bỏ qua event quá ngắn (<0.5s)

# Chỉ gửi khi có hành động
SKIP_NO_ACTIVITY=yes
POST_EVENT_SILENCE_SEC=2

# Ring buffer & clip
BUFFER_DIR=./buffer/cam1
SEGMENT_SECONDS=2
WRAP_SEGMENTS=150
BUFFER_MAX_FILES=150
PRE_ROLL=4
POST_ROLL=10
CLIP_DIR=./clips/cam1
CLIP_SAFETY_LAG=1.5

# Gemini
GEMINI_API_KEY=
GEMINI_MODEL=gemini-2.5-flash # gemini-1.5-flash || gemini-2.5-flash
USE_VERTEX=False

# Gửi ngay & Gemini chạy nền (hết delay)
SEND_IMMEDIATE=yes
GEMINI_ENABLE=yes
GEMINI_ASYNC=yes
FFMPEG_PRESET=ultrafast
FFMPEG_TUNE=zerolatency

# Telegram
TELEGRAM_BOT_TOKEN=123456:ABCDEF...
TELEGRAM_CHAT_ID=123456789
SEND_VIDEO=yes
MAX_TELEGRAM_MB=99

# YOLO / GPU
YOLO_MODEL=yolo11n.pt     # change to yolov8s.pt if GPU strong  yolo11n yolov8n
YOLO_IMGSZ=640
DEVICE=auto               # auto|cuda|cpu
USE_FP16=yes              # only effective when device is cuda

# Misc
NAME=cam1


# Log mức INFO (đổi DEBUG để xem chi tiết hơn)
LOG_LEVEL=INFO

# In từng detection ra console (mặc định tắt để đỡ spam)
LOG_DETECTION=yes

# (tuỳ chọn) Ghi log ra file quay vòng
LOG_FILE=./logs/cam1.log


# Housekeeping
HK_INTERVAL_SEC=7200        # dọn rác mỗi 2 tiếng
CLIPS_RETENTION_DAYS=3      # giữ clip 3 ngày
# (tuỳ chọn) các ngưỡng khác nếu muốn:
# BUFFER_MAX_FILES=120      # số file buffer tối đa (mặc định = WRAP_SEGMENTS)
# CLIPS_MAX_GB=10           # tổng dung lượng tối đa cho clips/


# Bật TTS
TTS_ENABLE=yes
# Chỉ đọc TTS cho tóm tắt từ Gemini
TTS_ON_IMMEDIATE=no
TTS_ON_SUMMARY=yes

# Tuỳ chọn giọng/ tốc độ
TTS_ENGINE=pyttsx3
TTS_VOICE=Vietnamese   # để trống nếu máy không có giọng VI
TTS_RATE=180
TTS_VOLUME=1.0


# Tự reconnect khi luồng treo/đứt
REOPEN_ON_STALL_SEC=30      # không frame >10s thì reconnect
MAX_FAIL_READS=100          # đọc lỗi liên tiếp 100 lần thì reconnect
REOPEN_BACKOFF_INIT=1.0     # backoff bắt đầu 1s
REOPEN_BACKOFF_MAX=30.0     # backoff tối đa 30s


# ========== WATCHDOG (giám sát luồng & tự reconnect) ==========
WATCHDOG_ENABLE=yes                 # Bật watchdog cấp ứng dụng. yes = theo dõi luồng; no = tắt.

WATCHDOG_STALL_SEC=120               # Ngưỡng “kẹt luồng”: nếu không có frame mới (last_frame_ts không đổi)
                                    # trong ≥ 120 giây thì coi là kẹt → gửi cảnh báo Telegram và xử lý theo EAGER_REOPEN.

WATCHDOG_POLL_SEC=5                 # Chu kỳ kiểm tra watchdog, mỗi 5 giây đo “tuổi” của frame cuối cùng một lần.

WATCHDOG_ALERT_COOLDOWN_SEC=7200     # Chống spam cảnh báo: sau khi đã gửi 1 cảnh báo kẹt,
                                    # chờ ít nhất 180 giây mới cho phép gửi cảnh báo tiếp theo.

WATCHDOG_EAGER_REOPEN=yes           # yes = ngoài việc cảnh báo, watchdog sẽ chủ động yêu cầu detector reconnect RTSP.
                                    # no  = chỉ cảnh báo, KHÔNG tự reconnect (bạn sẽ phải xử lý thủ công).

