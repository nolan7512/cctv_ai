# ===================== CAMERA & STREAM =====================
# MAIN (hi-res) dùng để ring-buffer & cắt clip; SUB (low-res) cho AI
RTSP_URL=rtsp://user:pass@CAM1/streamMain
RTSP_URL_SUB=rtsp://user:pass@CAM1/streamSub

# ===================== DETECTION (YOLO) ====================
FRAME_STRIDE=2                     # Bỏ qua khung để giảm tải (2 = suy luận mỗi 2 khung)
OBJECTS_OF_INTEREST=person,car,motorcycle,dog,cat
DETECTION_CONF=0.55                # Ngưỡng tin cậy YOLO (0.55–0.65 giảm nhiễu, nhưng có thể bỏ lỡ vật nhỏ/xa)
MIN_BBOX_AREA=5000                 # Lọc bbox quá nhỏ (px^2). Tăng nếu vẫn nhiễu do vật nhỏ xa.

# ===================== MOTION GATE (tiền lọc) ===============
MOTION_MIN_PIXELS=5000             # Số pixel thay đổi tối thiểu giữa 2 khung
MOTION_RATIO=0.02                  # Tỉ lệ vùng thay đổi / toàn khung. Tăng để giảm báo động do nhiễu.

# ===================== EVENT CONTROL ========================
# (Merger kiểu "kết thúc khi im lặng"): sự kiện CHỈ đóng khi không có detection ≥ MERGE_WINDOW_SECONDS
MERGE_WINDOW_SECONDS=10            # Idle-end = 20s im lặng mới đóng event (ngăn cắt khi bạn khuất tầm ngắn)
COOLDOWN_SECONDS=2                 # Hết event → chờ 2s rồi mới nhận event mới (chống spam)
PRE_ROLL=5                         # Cắt thêm 4s trước khi event bắt đầu
POST_ROLL=10                       # Cắt thêm 10s sau khi event kết thúc
MIN_EVENT_SECONDS=0.7              # Bỏ qua event quá ngắn
CONFIRM_FRAMES=3                   # Cần ≥3 khung có cùng lớp trong cửa sổ xác nhận
CONFIRM_WINDOW=1               # Cửa sổ xác nhận (giây): 0.6–1.0 là hợp lý

# ===================== RING BUFFER & CLIP ===================
BUFFER_DIR=./buffer/cam1
SEGMENT_SECONDS=2                  # Mỗi segment 2s (dễ cắt, độ trễ thấp)
WRAP_SEGMENTS=150                  # Tổng buffer ≈ 2s * 150 = 300s (~5 phút)
BUFFER_MAX_FILES=150               # Housekeeping: giới hạn số file buffer (≈ WRAP_SEGMENTS)
CLIP_DIR=./clips/cam1
CLIP_SAFETY_LAG=2               # Không cắt phần “chưa ghi xong”: lùi 1.5s so với thời điểm hiện tại

# ===================== GEMINI =================================
GEMINI_API_KEY=
GEMINI_MODEL=gemini-2.5-flash      # hoặc 1.5-flash tuỳ quota/tốc độ
USE_VERTEX=False
SEND_IMMEDIATE=yes                 # Gửi tin nhắn sơ bộ ngay khi chấp nhận event
GEMINI_ENABLE=yes
GEMINI_ASYNC=yes
FFMPEG_PRESET=ultrafast
FFMPEG_TUNE=zerolatency
SKIP_NO_ACTIVITY=yes               # Nếu Gemini kết luận “NO_ACTIVITY” thì bỏ gửi tóm tắt

# ===================== TELEGRAM ===============================
TELEGRAM_BOT_TOKEN=123456:ABCDEF...
TELEGRAM_CHAT_ID=123456789         # Group private dùng ID âm; channel/public có thể dùng @ten
SEND_VIDEO=yes
MAX_TELEGRAM_MB=99                 # Giới hạn file bot gửi (video). Voice note ≤ ~50MB.

# ===================== YOLO / GPU ============================
YOLO_MODEL=yolo11n.pt              # v11n nhanh/chuẩn hơn v8n; GPU nên export TensorRT FP16 để tối ưu
YOLO_IMGSZ=640                     # CPU yếu có thể hạ 512; GPU mạnh tăng 704/736 để bắt vật nhỏ
DEVICE=auto                        # auto|cuda|cpu
USE_FP16=yes                       # Chỉ có hiệu lực khi DEVICE=cuda (PyTorch/CUDA)

# ===================== MISC ================================
NAME=cam1
LOG_LEVEL=INFO
LOG_DETECTION=yes                  # YES sẽ log từng detection → có thể spam; chạy ổn rồi nên để NO
LOG_FILE=./logs/cam1.log           # (tuỳ chọn) log quay vòng

# ===================== HOUSEKEEPING =========================
HK_INTERVAL_SEC=7200               # Dọn rác mỗi 2 giờ
CLIPS_RETENTION_DAYS=3             # Giữ clip 3 ngày
# CLIPS_MAX_GB=10                  # (tuỳ chọn) ép tổng dung lượng clips/ không quá 10GB

# ===================== TTS (voice tóm tắt) ==================
TTS_ENABLE=yes
TTS_ON_IMMEDIATE=no                # Chỉ đọc bản tóm tắt, không đọc thông báo sơ bộ
TTS_ON_SUMMARY=yes
TTS_ENGINE=pyttsx3
TTS_VOICE=Vietnamese               # Để trống nếu máy không có giọng VI
TTS_RATE=180
TTS_VOLUME=1.0

# ===================== RECONNECT (tầng đọc RTSP) ============
REOPEN_ON_STALL_SEC=30             # Không có frame > 30s → detector tự reconnect (comment trước ghi 10s là sai)
MAX_FAIL_READS=100                 # Đọc lỗi liên tiếp 100 lần → reconnect
REOPEN_BACKOFF_INIT=1.0            # Backoff reconnect bắt đầu 1s
REOPEN_BACKOFF_MAX=30.0            # Backoff tối đa 30s

# ========== WATCHDOG (cấp ứng dụng: cảnh báo + ép reconnect) ==========
WATCHDOG_ENABLE=yes
WATCHDOG_STALL_SEC=120             # Không có frame mới ≥ 120s → cảnh báo + (tuỳ chọn) yêu cầu reconnect
WATCHDOG_POLL_SEC=5                # Kiểm tra mỗi 5s
WATCHDOG_ALERT_COOLDOWN_SEC=7200   # Chống spam cảnh báo: 2 giờ mới cảnh báo lại
WATCHDOG_EAGER_REOPEN=yes          # yes = watchdog sẽ gọi detector.request_reopen()
